/**
 * @File: ConfigDB.java 
 *
 */
package com.powere2e.reporttool.config;

import java.util.HashMap;
import java.util.List;


public class Config
{
    private static DB db = DB.getInstance();
    
    private static Prop[] props;
    public static String reportHome=null;
    public static String cachesize=null;
    public static String logLevel=null;
    private static DataSource[] datasources;
    public static DataSource dataSource;
    private static Email email;
    
    private static boolean initialized = false;
    
    public static boolean initialize()
    {
        
        try
        { 
            /**
             *  prop table
             *  key varchar(10)  
             *  value varchar(20)
             *  
             *  datasource table
             *  key  varchar2(10)
             *  isdefault char(1)
             *  type varchar2(4)   JDBC/JNDI
             *  JNDIname varchar2(20)
             *  jdbcdriver varchar2(40)
             *  JDBCurl varchar2(120)
             *  username varchar2(20)
             *  password varchar2(20)
             *  
             *  email table
             *  mailserver 
             *  mailfromaddress
             *  mailsubject
             *  mailbody
             *  mailuser
             *  mailpassword
             */
        	db=DB.getInstance();
            if(!db.HasTable("Prop"))
            {
                db.update("CREATE TABLE Prop ( key VARCHAR(10), value VARCHAR(20));");
            }
            
            if(!db.HasTable("DataSource"))
            {
                db.update("CREATE TABLE DataSource ( key VARCHAR(10), isdefault VARCHAR(1), type VARCHAR(4), " +
                        " JNDIName VARCHAR(20), JDBCDriver VARCHAR(40), JDBCUrl VARCHAR(120), " +
                        " username VARCHAR(20), password VARCHAR(20));");
            }
            
            if(!db.HasTable("Email"))
            {
                db.update("CREATE TABLE Email ( Mailserver VARCHAR(20), mailfromaddress VARCHAR(60), " +
                        " mailsubject VARCHAR(80), mailbody VARCHAR(200), mailuser VARCHAR(60), " +
                        " mailpassword VARCHAR(20));");
            }
            if(!db.HasTable("Report"))
            		{
            		db.update("create table Report( id INTEGER generated by default as identity (start with 1)," +
            				" ReportHome VARCHAR(100), CacheSize VARCHAR(10), LogLevel VARCHAR(2), primary key (id))");
            		}
            
            //Load the properties
            List hashmaps = db.query("SELECT * FROM Prop;" );
            if(hashmaps == null || hashmaps.size() == 0)
            {
                //initialize it
                db.update("INSERT INTO Prop(Key, value) Values ('ReportHome', '');");
                db.update("INSERT INTO Prop(Key, value) Values ('CacheSize', '5');");
                db.update("INSERT INTO Prop(Key, value) Values ('LogLevel', '1');");
                
                props = new Prop[3];
                props[0] = new Prop();
                props[0].setKey("ReportHome");
                props[0].setValue("");
                
                props[1] = new Prop();
                props[1].setKey("CacheSize");
                props[1].setValue("5");
                
                props[2] = new Prop();
                props[2].setKey("LogLevel");
                props[2].setValue("1");
                
            }
            else
            {
                props = new Prop[3];
                for(int i = 0; i < hashmaps.size(); i++)
                {
                    HashMap mp = (HashMap)hashmaps.get(i);
                    if("ReportHome".equalsIgnoreCase((String)mp.get("KEY")))
                    {
                        props[i] = new Prop();
                        props[i].setKey("ReportHome");
                        props[i].setValue((String)mp.get("VALUE"));
                        reportHome=(String)mp.get("VALUE");
                        continue;                        
                    }
                    
                    if("CacheSize".equalsIgnoreCase((String)mp.get("KEY")))
                    {
                        props[i] = new Prop();
                        props[i].setKey("CacheSize");
                        props[i].setValue((String)mp.get("VALUE"));
                        cachesize=(String)mp.get("VALUE");
                        
                        continue;                        
                    }
                    
                    if("LogLevel".equalsIgnoreCase((String)mp.get("KEY")))
                    {
                        props[i] = new Prop();
                        props[i].setKey("LogLevel");
                        props[i].setValue((String)(String)mp.get("VALUE"));
                        logLevel=(String)mp.get("VALUE");
                        continue;                        
                    }
                    
                }
            }
            
            //load the datasource configurations
            hashmaps = db.query("SELECT * FROM DataSource;" );
            if(hashmaps != null && hashmaps.size() > 0)
            {
                datasources = new DataSource[hashmaps.size()];
                for(int i = 0; i < hashmaps.size(); i++)
                {
                    HashMap mp = (HashMap)hashmaps.get(i);
                    datasources[i] = new DataSource();
                    datasources[i].setKey((String)mp.get("KEY"));
                    datasources[i].setType((String)mp.get("TYPE"));
                    datasources[i].setJNDIName((String)mp.get("JNDINAME"));
                    datasources[i].setJdbcdriver((String)mp.get("JDBCDRIVER"));
                    datasources[i].setJdbcurl((String)mp.get("JDBCURL"));
                    datasources[i].setUsername((String)mp.get("USERNAME"));
                    datasources[i].setPassword((String)mp.get("PASSWORD"));
                    datasources[i].setIsdefault("Y".equals((String)mp.get("ISDEFAULT")));
                }
                if(datasources.length>0)dataSource=datasources[0];
            }
            
            //load the email configurations
            hashmaps = db.query("SELECT * FROM Email;" );
            if(hashmaps != null && hashmaps.size() > 0)
            {
                HashMap mp = (HashMap)hashmaps.get(0);
                email = new Email();
                email.setEmailserver((String)mp.get("MAILSERVER"));
                email.setMailfromaddress((String)mp.get("MAILFROMADDRESS"));
                email.setMailsubject((String)mp.get("MAILSUBJECT"));
                email.setMailbody((String)mp.get("MAILBODY"));
                email.setMailuser((String)mp.get("MAILUSER"));
                email.setMailpassword((String)mp.get("MAILPASSWORD"));
            }
            
            db.close();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            return false;
        }
        
        initialized = true;
        return true;
    }
    
    public static void setReportHome(String reporthome)
    {
        for(int i=0; i<props.length; i++)
        {
            if(props[i].getKey().equals("ReportHome"))
                props[i].setValue(reporthome);
            try
            { 
                db.update("UPDATE Prop Set Value='" + reporthome + "' WHERE Key='ReportHome'");
            }
            catch (Exception e)
            {
                e.printStackTrace();                
            }
        }
    }
    
    public static String getReportHome()
    {
        for(int i=0; i<props.length; i++)
        {
            if(props[i].getKey().equals("ReportHome"))
                return props[i].getValue();
        }
        
        return null;
    }
    
    public void setCacheSize(int cacheSize)
    {
        for(int i=0; i<props.length; i++)
        {
            if(props[i].getKey().equals("CacheSize"))
                props[i].setValue(""+cacheSize);
            try
            { 
                db.update("UPDATE Prop Set Value='" + cacheSize + "' WHERE Key='CacheSize'");
            }
            catch (Exception e)
            {
                e.printStackTrace();                
            }
        }
    }
    
    public String getCacheSize()
    {
        for(int i=0; i<props.length; i++)
        {
            if(props[i].getKey().equals("CacheSize"))
                return props[i].getValue();
        }
        
        return null;
    }

	public static DataSource[] getDatasources() {
		return datasources;
	}

	public static void setDatasources(DataSource[] datasources) {
		Config.datasources = datasources;
	}

	public static Email getEmail() {
		return email;
	}

	public static void setEmail(Email email) {
		Config.email = email;
	}

	public static Prop[] getProps() {
		return props;
	}

	public static void setProps(Prop[] props) {
		Config.props = props;
	}
}
